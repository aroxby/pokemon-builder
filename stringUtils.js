function padString(str, desiredLength, padding = '\0') {
    console.log(str, desiredLength, padding);
    const newStr = str + padding.repeat(
        Math.ceil(Math.max(desiredLength - str.length, 0) / padding.length)
    );
    return newStr;
}

function gameEncodeString(str) {
    const map = GameStringEncodingMap;
    // Using a regex here feels dumb but there isn't universal replace
    const newStr = str.replace(/./g, (ch) => map[ch] ?? map['?']);
    return newStr;
}

const GameStringEncodingMap = {
    "\0": '\x50',
    " ": '\x7f',
    "A": '\x80',
    "B": '\x81',
    "C": '\x82',
    "D": '\x83',
    "E": '\x84',
    "F": '\x85',
    "G": '\x86',
    "H": '\x87',
    "I": '\x88',
    "J": '\x89',
    "K": '\x8a',
    "L": '\x8b',
    "M": '\x8c',
    "N": '\x8d',
    "O": '\x8e',
    "P": '\x8f',
    "Q": '\x90',
    "R": '\x91',
    "S": '\x92',
    "T": '\x93',
    "U": '\x94',
    "V": '\x95',
    "W": '\x96',
    "X": '\x97',
    "Y": '\x98',
    "Z": '\x99',
    "(": '\x9a',
    ")": '\x9b',
    ":": '\x9c',
    ";": '\x9d',
    "[": '\x9e',
    "]": '\x9f',
    "a": '\xa0',
    "b": '\xa1',
    "c": '\xa2',
    "d": '\xa3',
    "e": '\xa4',
    "f": '\xa5',
    "g": '\xa6',
    "h": '\xa7',
    "i": '\xa8',
    "j": '\xa9',
    "k": '\xaa',
    "l": '\xab',
    "m": '\xac',
    "n": '\xad',
    "o": '\xae',
    "p": '\xaf',
    "q": '\xb0',
    "r": '\xb1',
    "s": '\xb2',
    "t": '\xb3',
    "u": '\xb4',
    "v": '\xb5',
    "w": '\xb6',
    "x": '\xb7',
    "y": '\xb8',
    "z": '\xb9',
    "'": '\xe0',
    "-": '\xe3',
    "?": '\xe6',
    "!": '\xe7',
    ".": '\xe8',
    "♂": '\xef',
    "¥": '\xf0',
    "/": '\xf3',
    ",": '\xf4',
    "♀": '\xf5',
    "0": '\xf6',
    "1": '\xf7',
    "2": '\xf8',
    "3": '\xf9',
    "4": '\xfa',
    "5": '\xfb',
    "6": '\xfc',
    "7": '\xfd',
    "8": '\xfe',
    "9": '\xff',
};
